package simpledb.jdbc;

import java.sql._;

/** This class implements all of the methods of the Statement interface, by
  * throwing an exception for each one. Subclasses (such as SimpleStatement) can
  * override those methods that it want to implement.
  * @author
  *   Edward Sciore
  */
abstract class StatementAdapter extends Statement {
  def addBatch(sql: String) = {
    throw new SQLException("operation not implemented");
  }

  def cancel() = {
    throw new SQLException("operation not implemented");
  }

  def clearBatch() = {
    throw new SQLException("operation not implemented");
  }

  def clearWarnings() = {
    throw new SQLException("operation not implemented");
  }

  def close() = {
    throw new SQLException("operation not implemented");
  }

  def execute(sql: String) = {
    throw new SQLException("operation not implemented");
  }

  def execute(sql: String, autoGeneratedKeys: Int) = {
    throw new SQLException("operation not implemented");
  }

  def execute(sql: String, columnIndexes: scala.Array[Int]) = {
    throw new SQLException("operation not implemented");
  }

  def execute(sql: String, columnNames: scala.Array[String]) = {
    throw new SQLException("operation not implemented");
  }

  def executeBatch() = {
    throw new SQLException("operation not implemented");
  }

  def executeQuery(sql: String) = {
    throw new SQLException("operation not implemented");
  }

  def executeUpdate(sql: String) = {
    throw new SQLException("operation not implemented");
  }

  def executeUpdate(sql: String, autoGeneratedKeys: Int) = {
    throw new SQLException("operation not implemented");
  }

  def executeUpdate(sql: String, columnIndexes: scala.Array[Int]) = {
    throw new SQLException("operation not implemented");
  }

  def executeUpdate(sql: String, columnNames: scala.Array[String]) = {
    throw new SQLException("operation not implemented");
  }

  def getConnection() = {
    throw new SQLException("operation not implemented");
  }

  def getFetchDirection() = {
    throw new SQLException("operation not implemented");
  }

  def getFetchSize() = {
    throw new SQLException("operation not implemented");
  }

  def getGeneratedKeys() = {
    throw new SQLException("operation not implemented");
  }

  def getMaxFieldSize() = {
    throw new SQLException("operation not implemented");
  }

  def getMaxRows() = {
    throw new SQLException("operation not implemented");
  }

  def getMoreResults() = {
    throw new SQLException("operation not implemented");
  }

  def getMoreResults(current: Int) = {
    throw new SQLException("operation not implemented");
  }

  def getQueryTimeout() = {
    throw new SQLException("operation not implemented");
  }

  def getResultSet() = {
    throw new SQLException("operation not implemented");
  }

  def getResultSetConcurrency() = {
    throw new SQLException("operation not implemented");
  }

  def getResultSetHoldability() = {
    throw new SQLException("operation not implemented");
  }

  def getResultSetType() = {
    throw new SQLException("operation not implemented");
  }

  def getUpdateCount() = {
    throw new SQLException("operation not implemented");
  }

  def getWarnings() = {
    throw new SQLException("operation not implemented");
  }

  def isClosed() = {
    throw new SQLException("operation not implemented");
  }

  def isPoolable() = {
    throw new SQLException("operation not implemented");
  }

  def setCursorName(name: String) = {
    throw new SQLException("operation not implemented");
  }

  def setEscapeProcessing(enable: Boolean) = {}

  def setFetchDirection(direction: Int) = {}

  def setFetchSize(rows: Int) = {
    throw new SQLException("operation not implemented");
  }

  def setMaxFieldSize(max: Int) = {
    throw new SQLException("operation not implemented");
  }

  def setMaxRows(max: Int) = {
    throw new SQLException("operation not implemented");
  }

  def setPoolable(poolable: Boolean) = {
    throw new SQLException("operation not implemented");
  }

  def setQueryTimeout(seconds: Int) = {
    throw new SQLException("operation not implemented");
  }

  def isWrapperFor(iface: Class[Any]) = {
    throw new SQLException("operation not implemented");
  }

  def unwrap(iface: Class[Any]) = {
    throw new SQLException("operation not implemented");
  }

  def closeOnCompletion() = {
    throw new SQLException("operation not implemented");
  }

  def isCloseOnCompletion() = {
    throw new SQLException("operation not implemented");
  }
}
